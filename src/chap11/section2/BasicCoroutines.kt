package chap11.section2

import kotlinx.coroutines.*

fun main(){//메인 스레드 문맥
    GlobalScope.launch{//새로운 코루틴을 백그라운드에 실행
        delay(1000L)//1초의 넌블로킹 지연(시간의 기본 단위는 ms)
        println("World")//지연 후 출력
    }
    println("Hello")//메인 스레드의 코루틴이 지연되는 동안 계속 실행
    Thread.sleep(2000L)//메인 스레드가 JVM에서 바로 종료되지 않게 2초 기다림
}


/**
 * main함수의 블록은 메인스레드로서 작동하게 된다. 실행 결과를 보면 Hello는 메인 스레드에 의해 바로 출력됨
 * World는 코루틴 코드의 부분으로 메인 스레드와 분리되어 백그라운드에서 1초 뒤 실행된다. 따라서 메인 스레드의
 * 코드보다 지연되어 실행된다. 또한 메인 스레드와 별도로 실행되므로 넌블로킨 토드이기도 하다.
 * 코루틴에서 사용되는 함수는 suspend()로 선언된 지연 함수여야 코루틴 기능을 사용할 수 있다.
 * suspend로 표기함으로서 이 함수는 실행이 일시 중단될 수 있으며 필요한 경우 다시 재개할 수 있게 된다.
 *
 * 인텔리 제이 idea에는 지연 함수인 delay()가 사용된 곳에 아이콘을 확인할 수 있다.
 * 만일 suspend함수를 코루틴 블록 외에 사용하면 오류를 만날 수 있다.
 *
 * 컴파일러는 suspend가 붙은 함수를 자동적으로 추출해 Continuation클래스로부터 분리된 루틴을 만든다.
 * 이러한 지연 함수는 코루틴 빌더인 launch와 async에서 사용할 수 있지만 메인 스레드에서는 사용할 수 없다.
 * 지연 함수는 또 다른 지연 함수 내에서 사용하거나 코루틴 블록에서만 사용해야 한다.
 */